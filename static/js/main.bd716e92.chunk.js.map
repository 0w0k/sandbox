{"version":3,"sources":["layout/SiderBar.js","layout/Breadcrumb.js","App.js","serviceWorker.js","index.js"],"names":["Sider","SubMenu","SiderBar","props","react_default","a","createElement","collapsible","className","menu","theme","defaultSelectedKeys","selectedKeys","location","pathname","mode","Item","key","react_router_dom","to","icon","type","title","Breadcrumb","breadcrumb","style","margin","Header","Content","Footer","Home","lazy","__webpack_require__","e","then","bind","Page","App","layout","minHeight","react_router","component","_ref","background","padding","_ref2","react","fallback","exact","path","textAlign","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd716e92.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Sider } = Layout;\nconst { SubMenu } = Menu;\n\nexport default function SiderBar (props) {\n  return (\n    <Sider collapsible>\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" defaultSelectedKeys={['/']} selectedKeys={[props.location.pathname]} mode=\"inline\">\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">\n            <Icon type=\"home\" />\n            <span>Home</span>\n          </Link>\n        </Menu.Item>\n        <Menu.Item key=\"/page\">\n          <Link to=\"/page\">\n            <Icon type=\"desktop\" />\n            <span>Pgae</span>\n          </Link>\n        </Menu.Item>\n        <SubMenu\n          key=\"sub1\"\n          title={\n            <span>\n              <Icon type=\"user\" />\n              <span>User</span>\n            </span>\n          }\n        >\n          <Menu.Item key=\"3\">Tom</Menu.Item>\n          <Menu.Item key=\"4\">Bill</Menu.Item>\n          <Menu.Item key=\"5\">Alex</Menu.Item>\n        </SubMenu>\n        <SubMenu\n          key=\"sub2\"\n          title={\n            <span>\n              <Icon type=\"team\" />\n              <span>Team</span>\n            </span>\n          }\n        >\n          <Menu.Item key=\"6\">Team 1</Menu.Item>\n          <Menu.Item key=\"8\">Team 2</Menu.Item>\n        </SubMenu>\n        <Menu.Item key=\"9\">\n          <Icon type=\"file\" />\n          <span>File</span>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n  )\n}","import React from 'react';\nimport { Breadcrumb as BreadcrumbCompoment } from 'antd';\nimport { Link } from 'react-router-dom';\n\nexport default function Breadcrumb (props) {\n  return (\n    <BreadcrumbCompoment style={{ margin: '16px 0' }}>\n      <BreadcrumbCompoment.Item><Link to='/'>Home</Link></BreadcrumbCompoment.Item>\n      <BreadcrumbCompoment.Item>Bill</BreadcrumbCompoment.Item>\n    </BreadcrumbCompoment>\n  )\n}","import React, { Suspense, lazy } from 'react';\nimport { Layout } from 'antd';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport SiderBar from './layout/SiderBar';\nimport Breadcrumb from './layout/Breadcrumb';\n\nimport './App.less';\n\nconst { Header, Content, Footer } = Layout;\n\nconst Home = lazy(() => import('./routes/Home'));\nconst Page = lazy(() => import('./routes/Page'));\n\nfunction App() {\n  return (\n    <Router>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Route component={({ location }) => <SiderBar location={location} />} />\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }} />\n          <Content style={{ margin: '0 16px' }}>\n            <Route component={({ location }) => <Breadcrumb location={location} />} />\n            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n              <Suspense fallback={<div>Loading...</div>}>\n                <Route exact path=\"/\" component={Home}/>\n                <Route path=\"/page\" component={Page}/>\n              </Suspense>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>React Layout Â©2018 Created by Yousfans</Footer>\n        </Layout>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}