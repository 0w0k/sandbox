{"version":3,"sources":["routes/Mobx.tsx"],"names":["TodoList","action","bound","title","this","todos","push","key","Math","random","filter","todo","finished","length","observable","computed","TodoListView","observer","props","_useState","useState","_useState2","Object","_Users_zhangwenjie_workspace_react_layout_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__","newTodo","setNewTodo","react__WEBPACK_IMPORTED_MODULE_12___default","a","createElement","todoList","unfinishedTodoCount","antd_es_input__WEBPACK_IMPORTED_MODULE_5__","value","onChange","e","target","antd_es_button__WEBPACK_IMPORTED_MODULE_3__","onClick","add","reset","map","TodoView","toString","onRemove","remove","_ref","antd_es_checkbox__WEBPACK_IMPORTED_MODULE_1__","defaultChecked","store","__webpack_exports__"],"mappings":"uPAOMA,KAKHC,IAAOC,qIACJC,GACFC,KAAKC,MAAMC,KAAK,CACdC,IAAKC,KAAKC,SACVN,yCAGGI,GACLH,KAAKC,MAAQD,KAAKC,MAAMK,OAAO,SAAAC,GAAI,OAAIA,EAAKJ,MAAQA,oCAGpDH,KAAKC,MAAQ,+CAbb,OAAOD,KAAKC,MAAMK,OAAO,SAAAC,GAAI,OAAKA,EAAKC,WAAUC,mDAFlDC,6EAA2B,qDAC3BC,0LAwCGC,EAA6CC,YAAS,SAACC,GAAU,IAAAC,EACrCC,mBAAS,IAD4BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7DK,EAD6DH,EAAA,GACpDI,EADoDJ,EAAA,GAErE,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wDAAaV,EAAMW,SAASC,qBAC5BJ,EAAAC,EAAAC,cAAAG,EAAA,GAAOC,MAAOR,EAASS,SAAU,SAAAC,GAAC,OAAIT,EAAWS,EAAEC,OAAOH,UAC1DN,EAAAC,EAAAC,cAAAQ,EAAA,GAAQC,QAAS,kBAAMnB,EAAMW,SAASS,IAAId,KAA1C,OACAE,EAAAC,EAAAC,cAAAQ,EAAA,GAAQC,QAAS,kBAAMnB,EAAMW,SAASU,UAAtC,SACAb,EAAAC,EAAAC,cAAA,UACGV,EAAMW,SAASxB,MAAMmC,IAAI,SAAA7B,GAAI,OAC5Be,EAAAC,EAAAC,cAACa,EAAD,CAAU9B,KAAMA,EAAMJ,IAAKI,EAAKJ,IAAImC,WAAYC,SAAU,SAACpC,GAAD,OAAiBW,EAAMW,SAASe,OAAOrC,YAOrGkC,EAAWxB,YAAS,SAAA4B,GAAA,IAAGlC,EAAHkC,EAAGlC,KAAMgC,EAATE,EAASF,SAAT,OACxBjB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAAkB,EAAA,GAAUC,eAAgBpC,EAAKC,SAAUyB,QAAS,kBAAO1B,EAAKC,UAAYD,EAAKC,YAC9ED,EAAKR,MACNuB,EAAAC,EAAAC,cAAAQ,EAAA,GAAQC,QAAS,kBAAMM,EAAShC,EAAKJ,OAArC,YAIEyC,EAAQ,IAAIhD,EAClBgD,EAAM3C,MAAMC,KACV,CACEC,IAAK,EACLJ,MAAO,qBACPS,UAAU,GAEZ,CACEL,IAAK,EACLJ,MAAO,uBAII8C,EAAA,0BAAMvB,EAAAC,EAAAC,cAACZ,EAAD,CAAca,SAAUmB","file":"static/js/9.02533e97.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { observable, computed, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { Button, Checkbox, Input } from \"antd\";\n\ninterface todo { key: number, title: string, finished?: boolean }\n\nclass TodoList {\n  @observable todos: todo[] = [];\n  @computed get unfinishedTodoCount() {\n    return this.todos.filter(todo => !todo.finished).length;\n  }\n  @action.bound\n  add(title: string) {\n    this.todos.push({\n      key: Math.random(),\n      title,\n    })\n  }\n  remove(key: number) {\n    this.todos = this.todos.filter(todo => todo.key !== key);\n  }\n  reset() {\n    this.todos = []\n  }\n}\n\ntype TodoListViewProps = { todoList: TodoList }\n\n// @observer\n// class TodoListView extends React.Component<TodoListViewProps> {\n//   // constructor(props: { todoList: TodoList}) {\n//   //   super(props);\n//   // }\n//   render() {\n//     return (\n//       <div>\n//         <ul>\n//           {this.props.todoList.todos.map(todo => (\n//             <TodoView todo={todo} key={todo.title} />\n//           ))}\n//         </ul>\n//         <Button>Add</Button>\n//         Tasks left: {this.props.todoList.unfinishedTodoCount}\n//       </div>\n//     )\n//   }\n// }\n\nconst TodoListView: React.SFC<TodoListViewProps> = observer((props) => {\n  const [ newTodo, setNewTodo ] = useState('');\n  return (\n    <div>\n      <p>未完成的任务数: {props.todoList.unfinishedTodoCount}</p>\n      <Input value={newTodo} onChange={e => setNewTodo(e.target.value)} />\n      <Button onClick={() => props.todoList.add(newTodo)}>Add</Button>\n      <Button onClick={() => props.todoList.reset()}>Reset</Button>\n      <ul>\n        {props.todoList.todos.map(todo => (\n          <TodoView todo={todo} key={todo.key.toString()} onRemove={(key: number) => props.todoList.remove(key)} />\n        ))}\n      </ul>\n    </div>\n  )\n})\n\nconst TodoView = observer(({ todo, onRemove }) => (\n  <li>\n    <Checkbox defaultChecked={todo.finished} onClick={() => (todo.finished = !todo.finished)} />\n    {todo.title}\n    <Button onClick={() => onRemove(todo.key)}>Reset</Button>\n  </li>\n))\n\nconst store = new TodoList();\nstore.todos.push(\n  {\n    key: 1,\n    title: '吃饭饭',\n    finished: true\n  },\n  {\n    key: 2,\n    title: '打豆豆',\n  },\n);\n\nexport default () => <TodoListView todoList={store} />;"],"sourceRoot":""}